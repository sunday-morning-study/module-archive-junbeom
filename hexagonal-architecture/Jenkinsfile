/* Requires the Docker Pipeline plugin */
pipeline {
    agent { docker { image 'hexagonal-architecture' } }
    stages {
        stage('Checkout') {
            steps {
                // 소스 코드 체크아웃
                checkout scm
            }
        }
        stage('Build') {
            steps {
                // Gradle을 사용하여 빌드 및 테스트
                sh './gradlew build'
            }
        }
        stage('Test') {
            steps {
                // 테스트 실행
                sh './gradlew test'
            }
        }
        stage('Stop and Remove Old Container') {
            steps {
                sh '''
                    CONTAINER_ID=$(docker ps -q -f name=spring-boot-server)
                    if [ -n "$CONTAINER_ID" ]; then
                        docker stop spring-boot-server
                        docker rm spring-boot-server
                    fi
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                // 새 Docker 이미지를 빌드하고 기존 이미지 덮어쓰기
                sh 'docker build -t hexagonal-architecture .'
            }
        }
        stage('Run New Container') {
            steps {
                sh 'docker run -d -p 8080:8080 --name spring-boot-server hexagonal-architecture'
            }
        }
    }
}